#!/bin/bash

set -eu

# ----------------------------------------------------------
# base setup

TOPPATH=$PWD

EFLASHER_RAW_IMG=$1
SOC=$2
TARGET_OS=$(echo ${3,,}|sed 's/\///g')

OS_IMAGES_DIR=${TOPPATH}/${TARGET_OS}

[ -z ${EFLASHER_RAW_IMG} -o -z ${SOC} -o -z ${TARGET_OS} ] && {
        echo "Usage: $0 <image name> <plat>"
        exit 1
}

[ -f ${EFLASHER_RAW_IMG} ] || {
	echo "Error: ${EFLASHER_RAW_IMG} not found"
	exit 1
}

[ -f ${TOPPATH}/mk-emmc-image.sh ] || {
	echo "Error: please run at the script's home dir"
	exit 1
}

[ -d ${OS_IMAGES_DIR} ] || {
        echo "Error: not found ${OS_IMAGES_DIR}"
        exit 1
}

case ${TARGET_OS} in
buildroot*|friendlycore-focal-arm64|debian-*|ubuntu-*|openmediavault-*)
        RAW_FILE=${SOC}-eflasher-${TARGET_OS%-*}-4.19-arm64-$(date +%Y%m%d).img ;;
friendlycore-lite-focal-kernel4-arm64)
        RAW_FILE=${SOC}-eflasher-friendlycore-lite-focal-4.19-arm64-$(date +%Y%m%d).img ;;
friendlywrt-kernel4)
        RAW_FILE=${SOC}-eflasher-friendlywrt-4.19-$(date +%Y%m%d).img ;;
android*)
        RAW_FILE=${SOC}-eflasher-${TARGET_OS}-$(date +%Y%m%d).img ;;
*)
        RAW_FILE=${SOC}-eflasher-${TARGET_OS}-$(date +%Y%m%d).img ;;
esac

AUTOSTART=no
Args=( "$@" )
# skip arg1,arg2,arg3
for (( i=3; i<${#Args[@]}; i++ ));
do
	if [[ ! -z $(echo ${Args[$i]} | grep "autostart=" -i) ]]; then
		YESORNO=$(echo ${Args[$i]:10} | tr '[:lower:]' '[:upper:]')
		case ${YESORNO} in
		YES|Y)
			AUTOSTART=yes
			;;
		NO|N)
			AUTOSTART=no
			;;
		*)
			;;
		esac
	elif [[ ! -z $(echo ${Args[$i]} | grep "filename=") ]]; then
        RAW_FILE=${Args[$i]:9}
    elif [[ ! -z $(echo ${Args[$i]} | grep "=") ]]; then
		echo "Warning: unknow arg: ${Args[$i]}"
    else
        RAW_FILE=${Args[$i]}
    fi
done

gen_eflasher_conf()
{
    local AutoFlashOSName=
    if [ ${3} = "yes" ]; then
        AutoFlashOSName=${2}
    fi
    OSNamesMergeWithComma="friendlywr,debian-buster-desktop-arm64,debian-bullseye-desktop-arm64,friendlycore-focal-arm64,friendlycore-lite-focal-kernel4-arm64,android10,android11"
    cat > ${1}/eflasher.conf <<EOL
; This is the eFlasher configuration file.
; See http://wiki.friendlyarm.com/wiki/index.php/EFlasher for detailed information.

[General]
; Automate OS installation at system startup,
; The "autoStart" field specifies the path of your firmware,
; Available values: ${OSNamesMergeWithComma}
autoStart=${AutoFlashOSName}

; Automatically restore the specified backup at system startup,
; The "autoRestore" field specifies the path of your backup file.
autoRestore=

; If the "autoExit" set to true, the eflasher-gui will automatically exit after burning or restoring is completed,
; You can do something else after burning or restoring by modifying /opt/run-eflasher.sh.
autoExit=false

[UI]
; HDMI overscan option, examples:
;     screenSizePercent=auto
;     screenSizePercent=90
screenSizePercent=auto

welcomeMessage=
hideMenuButton=false
hideBackupAndRestoreButton=false
hideStatusBar=false
EOL
}

FULLIMG=out/${RAW_FILE}

# ----------------------------------------------------------
cp ${EFLASHER_RAW_IMG} ${FULLIMG}
DEV=`losetup -f`
for i in `seq 3`; do
    if [ -b ${DEV} ]; then
        break
    else
        echo "Waitting ${DEV}"
        sleep 1
    fi
done
MNT=/tmp/media_exfat
rm -rf ${MNT}
if [ $? -eq 0 ]; then
        echo ""
else
        umount ${MNT}
        rm -rf ${MNT}
fi
# ----------------------------------------------------------
losetup ${DEV} ${FULLIMG}
sleep 1
partprobe ${DEV}
sleep 1
mkdir -p ${MNT}
if command -v mount.exfat-fuse >/dev/null 2>&1; then
    mount.exfat-fuse ${DEV}p1 ${MNT}
elif command -v mount.exfat >/dev/null 2>&1; then
    mount.exfat ${DEV}p1 ${MNT}
else
    mount -t exfat ${DEV}p1 ${MNT}
fi
gen_eflasher_conf ${MNT} ${TARGET_OS} ${AUTOSTART}
mkdir -p ${MNT}/${TARGET_OS}
rm -rf ${MNT}/${TARGET_OS}/*
echo "copying ${OS_IMAGES_DIR}/* to ${MNT}/${TARGET_OS} ..."
(cd ${OS_IMAGES_DIR} && find . -maxdepth 1 -type f -exec cp {} ${MNT}/${TARGET_OS} \;)

umount ${MNT}
losetup -d ${DEV}
ls -l ${FULLIMG}
exit 0
